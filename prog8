8.	Design, develop and implement a C/C++/Java program to implement Bankerâ€™s algorithm. Assume suitable input required to demonstrate the results.

#include<stdio.h> 

struct process 
{
 int allocation[6],max[6],need[6],finished, request[6];
 } p[10]; 

int avail[6], sseq[10], ss=0, check1=0, check2=0, n, pid, work[6]; 
int nor, nor_i;

void main()
 {
 int safeseq(void);
 	int tj,ch,i=0,j=0,k,pid,ch1;
 
 	printf("\n Enter number of processes : "); 
 	scanf("%d",&n); 
 
 printf("\n Enter the Number of Resources : ");
 scanf("%d", &nor);
 	
 	printf("\n Enter the Available Resources : ");
 for(j=0;j<n;j++) 
 	{ 
 		for(k=0; k<nor; k++) 
 		{ 
 			if(j==0) 
 			{
 printf("\n For Resource type %d : ",k); 
 scanf("%d", &avail[k]); 
 }
 
 p[j].max[k]=0;
 			p[j].allocation[k]=0; 
 			p[j].need[k]=0;
 p[j].finished=0; 
 p[j].request[k]=0; 
 	}
 }
 
 printf("\n Enter Max resources for all processes\n");
 for(i=0;i<n;i++)
 	{
 for(j=0; j< nor; j++) 
 		{ 
 scanf("%d",&p[i].max[j]); 
 		}
 	}
 
 	printf("\n Enter Allocated resources for all processes\n"); 
 	for(i=0;i<n;i++) 
 {
 for(j=0;j<nor;j++)
 		{
 			scanf("%d",&p[i].allocation[j]);
 
 if(p[i].allocation[j]>p[i].max[j]) 
 			{ 
 printf("\n Allocation should be less < or == max"); 
 				j--; 
 			} 
 	else 
 	p[i].need[j]=p[i].max[j]-p[i].allocation[j];
 }
 }
 if(safeseq()==1)
 { 
 printf("\n The System is in Safe state\n "); 
 }
 else 
 printf("\n The System is Not in safe state\n "); 
 printf("\n Need\n"); 
 for(i=0;i<n;i++) 
 	{ 
 		for(j=0;j<nor;j++)
 		printf(" %d ",p[i].need[j]); 
 		printf("\n"); 
 }
 }
 
 int safeseq()
 {
 int tk,tj,i,j,k;
 	ss=0; 
 	for(j=0; j<nor; j++)
 work[j] = avail[j];
 for(j=0;j<n;j++)
 	p[j].finished=0; 
 for(tk=0; tk<nor; tk++) 
 {
 for(j=0;j<n;j++) 
 { 
 if(p[j].finished==0)
 { 
 check1=0; 
 for(k=0; k<nor; k++) 
 if(p[j].need[k]<=work[k])
 						check1++; 
 if(check1== nor) 
 { 
 for(k=0;k< nor;k++)
 					{
 work[k]= work[k]+p[j]. allocation[k];
 p[j]. finished=1; 
 					}
 					sseq[ss]=j;
 ss++;
 		}
 			}
 		}
 }
 	check2=0; 
 for(i=0;i<n;i++) 
 if(p[i].finished==1)
 check2++; 
 	if(check2>=n)
 	{
 printf("The Safe Sequence is\t :");
 for(tj=0;tj<n;tj++) 
 		printf("%d, ", sseq[tj]);
 		return 1;
 	}
 	return 0;
 }
