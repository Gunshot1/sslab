1.	a. Write a LEX program to recognize valid arithmetic expression. Identifiers in the expression could be only integers and operators could be + and *. Count the identifiers & operators present and print them separately.

%{
#include<stdio.h>
int op=0,id=0,ob=0,cb=0,flag=1;
%}
%%
[+*]		op++;
[0-9]+		id++;
"("		ob++;
")"		cb++;
[-/%a-zA-Z]	flag=0;
%%
void main()
{
	printf("enter the Expression \n");
	yylex();
	if(flag==0 || ob!=cb)	
    		printf("invalid expression");
	else
		printf("operators=%d and identifiers=%d\n",op,id);
}




1.	b. Write YACC program to evaluate arithmetic expression involving operators: +, -, *, and /

LEX PART:

%{
    
  	 #include "y.tab.h"
    	extern int yylval;
%}

%%
[0-9]+	      {yylval=atoi(yytext);return number;}
. 	       {return yytext[0];}
%%

YACC PART:
%{
   	 #include<stdio.h>
    	#include<stdlib.h>
     	 int res=0;
%}

%token number
%left '+' '-'
%left '*' '/'

%%
stmt:expr {res=$$;}
       ;
expr:expr '+' expr {$$=$1+$3;}
        |expr '-' expr {$$=$1-$3;}
        |expr '*' expr {$$=$1*$3;}
        |expr '/' expr {if($3==0)
                              exit(0);
                              else $$=$1/$3;}
         |'(' expr ')'   {$$=$2;}
         |number
         ;
%%
void main()
{
printf(" enter expr\n");
yyparse();
printf("Result is =%d \n",res);
exit(0);
}


yyerror()
{
printf("invalid\n");
exit(0);
}
